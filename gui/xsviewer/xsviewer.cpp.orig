#include "xsviewer.hpp"
#include "ui_xsviewer.h"

#include <cmath>
#include <functional>
#include <map>
#include <sstream>
#include <unordered_map>

#include <QFileDialog>
#include <QFileInfo>
#include <QMessageBox>
#include <QPalette>
#include <QString>


// See http://vtk.1045678.n5.nabble.com/Error-no-override-found-for-vtkContextDevice2D-td5741533.html
#include <vtkAutoInit.h>
VTK_MODULE_INIT(vtkRenderingContextOpenGL2)
VTK_MODULE_INIT(vtkRenderingOpenGL2)
VTK_MODULE_INIT(vtkIOExportOpenGL2)
VTK_MODULE_INIT(vtkRenderingGL2PSOpenGL2)
VTK_MODULE_INIT(vtkInteractionStyle)
VTK_MODULE_INIT(vtkRenderingFreeType)
#include <vtkAxis.h>
#include <vtkColor.h>
#include <QVTKOpenGLWidget.h>
#include <vtkBrush.h>
#include <vtkChartLegend.h>
#include <vtkChartXY.h>
#include <vtkContextScene.h>
#include <vtkContextView.h>
#include <vtkGL2PSExporter.h>
#include <vtkFloatArray.h>
#include <vtkGenericOpenGLRenderWindow.h>
#include <vtkMath.h>
#include <vtkSmartPointer.h>
#include <vtkPen.h>
#include <vtkPlot.h>
#include <vtkRenderer.h>
#include <vtkRendererCollection.h>
#include <vtkRenderWindowInteractor.h>
#include <vtkSmartPointer.h>
#include <vtkTable.h>
#include <vtkTimerLog.h>

#include "nuclidetablewidget.hpp"
#include "chartconfigdialog.hpp"
#include "../fileformat.hpp"
#include "../globals.hpp"
#include "../../pkcore/simulation.hpp"
#include "../../pkcore/material/materials.hpp"
#include "../../pkcore/material/nuclide.hpp"
#include "../../pkcore/utils/message.hpp"

// 参考 https://www.vtk.org/gitweb?p=VTK.git;a=blob;f=Examples/Charts/Cxx/QChartTable.cxx
// 3Dは Charts/Core/Testing/Cxx/TestSurfacePlot.cxx .

/*
 * vtkChartをQVTKOpenGLWidgetに追加するには？
 *
 * cf. 3Dの場合
 * 1.QVTKOpenGLWitにRenderWindowを追加し、(qvtkWidget_->SetRenderWindow(vtkSmartPointer<vtkGenericOpenGLRenderWindow>::New());)
 * 2.そのRenderWindowにレンダラを追加し、	(qvtkWidget_->GetRenderWindow()->AddRenderer(renderer_);)
 * 3．そのレンダラにActorを追加する。(renderer_->AddActor(…);)
 *
 * vtkFloatArrayに値をセット(vtkFloatArray::SetName())
 * vtkTableの列に加える(vtkTable::AddColumn())デフォルトでは最初の列がx座標になる
 * vtkTable::SetNumberOfRows()で行数をセット
 * vtkTable::SetValue(row, col, 値)で値をセット
 * vtkChartXYを作成
 * contextviewのsceneにAddItemでチャートを追加
 * vtkPlotを作成してvtkChartに追加
 * vtkPlotにtableを追加
 *
 * データ→vtkFloatArray→vtkTable→vtkPlot→vtkChartXY→vtkContextScene→vtkContextView→vtkGenericOpenGLRenderWindow→QVTKOpenGLWidget
 * という流れになっている。
 *
 * 方針：
 * ・QVTKOpenGLWidget::GetRenderWindow,  vtkRenderWindow::GetInteractorなどを利用して、なるべく左辺値変数の生成を避ける。
 */

namespace {
const double MINIMUM_VALUE = 1e-30;
const double FACTOR_EPS = 1e-14;
}

// FIXME ファイル未読込時の外見が無様

XsViewer::XsViewer(QWidget *parent, const QString &tabText)
	:TabItem(parent, tabText), 	ui(new Ui::XsViewer),
	  contextView_(vtkSmartPointer<vtkContextView>::New()),
	  chart_(vtkSmartPointer<vtkChartXY>::New()),
	  backgroundBrush_(vtkSmartPointer<vtkBrush>::New())
{
	ui->setupUi(this);
	ui->toolBoxNuclide->removeItem(0);  // designerで作成した1ページ目は削除

	QSurfaceFormat::setDefaultFormat(QVTKOpenGLWidget::defaultFormat());
	ui->xsVtkWidget->SetRenderWindow(vtkSmartPointer<vtkGenericOpenGLRenderWindow>::New());

	contextView_->SetRenderWindow(ui->xsVtkWidget->GetRenderWindow());
	contextView_->SetInteractor(ui->xsVtkWidget->GetRenderWindow()->GetInteractor());

    chart_->GetAxis(vtkAxis::BOTTOM)->SetTitle("Energy (MeV)");
    chart_->GetAxis(vtkAxis::LEFT)->SetTitle("Cross section (barn)");
	// FIXME label, tickの数の最適化
	//chart_->GetAxis(vtkAxis::LEFT)->SetLabelOffset(20); // これは軸とラベルの間隔(pixel)
<<<<<<< HEAD
	chart_->GetAxis(vtkAxis::LEFT)->SetLabelFormat("%e");  // これはなぜか適用されない。
	mDebug() << "labelFormat===" << chart_->GetAxis(vtkAxis::LEFT)->GetLabelFormat();
	// 使えそうな関数
	//  vtkStringArray* vtkAxis::GetTickLabels 	( 		)
	//  vtkAxis::SetCustomTickPositions(vtkDoubleArray *positions, 	vtkStringArray *labels)
	// void vtkAxis::GenerateTickLabels(double min, double max)
	// etc... だけど先に自動で付与されるlabel/ticksなどを表示しない/削除する方法が必要
=======
>>>>>>> 3d99c00ec4de936330ea8ade596701c4ea7f1f5d

    chartConfig_.applyToChart(chart_);
	contextView_->GetScene()->AddItem(chart_);
}


XsViewer::~XsViewer() {delete ui;}

void XsViewer::retranslate() {;}

void XsViewer::clear()
{
	simulation_.reset();
	// nuclideTableWidgetのクリアはややこしい。
	// 1. NuclideTableWidget自体の中身のクリア
	// 2. NuclideTableWidgetを保持しているnuclideTables_のクリア
	// 3. toolBoxのクリア
	// 4. NuclideTableWidgetのインスタンスdelete
	// 特に4．が重要.parentをセットしているのでXsViewerがデストラとされるときには自動開放されるが、
	// 核種テーブルのみをクリアするときには個別にdeleteする必要がある。
	for(size_t i = 0; i < nuclideTables_.size(); ++i) {
		nuclideTables_.at(i)->clear();
		delete nuclideTables_.at(i);
	}

	nuclideTables_.clear();
	int numBox = ui->toolBoxNuclide->count();
	for(int i = 0; i < numBox; ++i) {
		ui->toolBoxNuclide->removeItem(0);  // 削除するたびにcountもindexもずれるのでindex=0固定で先頭から削除する。
	}
	currentTargets_.clear();
	addingTargets_.clear();
	removingTargets_.clear();

//	// VTK関連のクリア
	chart_->ClearPlots();
//	chart_->ClearItems();
	//	// vtkContextViewはクリアする必要ない？;
}

// simulationデータが変更されたらここのスロットが実行される
void XsViewer::updateSimulationData(std::shared_ptr<const Simulation> sim)
{
	if(!sim) return;
	this->clear();
	simulation_ = sim;

	auto materials = simulation_->getMaterials();

	// まずparticle typeを知る必要がある。
	auto ptypes = materials->particleTypes();

	// ptypeをキーにした 核種一覧。vectorのNuclideは重複しないように、追加前にnuclide名を検索する必要がある。
	// このマップはmaterialsからmaterial一覧を受け取って、一覧をスキャンして作成する。
	// Tableクラスはvector部分を受け取って表を作成する。


	auto materialMap = materials->materialMapByName();  // 材料名をキーとしたMaterialスマポへのマップ

	// nuclidesMap2が全データ格納可能なようにリサイズする。
	int maxPtype = 0;
	for(auto &ptype: ptypes) {
		if(maxPtype < static_cast<int>(ptype)) maxPtype = static_cast<int>(ptype);
	}
	nuclidesMap2_.resize(static_cast<size_t>(maxPtype)+1);

	for(auto &ptype: ptypes) {
		//std::vector<std::shared_ptr<const mat::Nuclide>> nucVec;
		std::unordered_map<std::string, std::shared_ptr<const mat::Nuclide>> nucMap; // keyはzaid

		for(auto &matPair: materialMap) {
			/*
			 * nuclides() 核種データは vector<vector<pair<sahred<nuclide>, ratio>>>で
			 * nuclides[ParticleType].at[index].first で核種データを
			 * nuclides[ParticleType].at[index].second でその核種の質量存在割合を
			 * 返す。 indexは材料構成核種のインデックス。1材料1核種ならindex=0のみ
			 */
			auto nuclides = matPair.second->nuclides();  // matPair.secondがshared_ptr<Material>
			for(auto &nPair: nuclides.at(static_cast<size_t>(ptype))) {
				auto nuc = nPair.first;
				nucMap[nuc->zaid()] = nuc;
			}
		}

		NuclideTableWidget* table = new NuclideTableWidget(ptype, this);

		table->setNuclides(nucMap);
		ui->toolBoxNuclide->addItem(table, QString::fromStdString(table->particleName()));
		nuclideTables_.push_back(table);


		//nuclidesMap_.emplace(ptype, std::move(nucVec));
		nuclidesMap2_.at(static_cast<int>(ptype)) = nucMap;

		connect(table, &NuclideTableWidget::itemChanged, this, &XsViewer::handleItemChanged);
	}

	// サイズ調整
    int paneWidth = (nuclideTables_.empty() || !nuclideTables_.front())?
                ui->toolBoxNuclide->width() : nuclideTables_.front()->minRequiredWidth();
	ui->splitter->setSizes(QList<int>{paneWidth, this->size().width() - paneWidth});
}

void XsViewer::exportChart()
{
    // まず表示内容があるかをチェック
    if(chart_->GetNumberOfPlots() == 0){
        QMessageBox::warning(this, tr("Export chart"), tr("No cross section data is plotted."));
        return;
    }
	// 次にファイル名を取得
	QFileInfo finfo(QFileDialog::getSaveFileName(this, tr("Select exporting (vector) file name(eps, ps pdf, svg, tex)")));
	auto format = ff::strToFormat2DV(finfo.suffix().toStdString());


	auto exp = vtkSmartPointer<vtkGL2PSExporter>::New();
	exp->SetRenderWindow(ui->xsVtkWidget->GetRenderWindow());


	switch(format) {
	case ff::FORMAT2DV::NOT_DEFINED:
		QMessageBox::warning(this, tr("Warning"), tr("Select eps/ps/pdf/svg/tex file name."));
		return;
		break;
	case ff::FORMAT2DV::EPS:
		exp->SetFileFormatToEPS();
		break;
	case ff::FORMAT2DV::PS:
		exp->SetFileFormatToPS();
		break;
	case ff::FORMAT2DV::PDF:
		exp->SetFileFormatToPDF();
		break;
	case ff::FORMAT2DV::SVG:
		exp->SetFileFormatToSVG();
		break;
	case ff::FORMAT2DV::TEX:
		exp->SetFileFormatToTeX();
		break;
	}
	QString baseName = finfo.absolutePath() + "/" + finfo.completeBaseName();  // 実はWindowsで/セパレータは使える。DOSで使えないだけ
	exp->SetFilePrefix(baseName.toStdString().c_str());
	exp->Write();
    //　TODO エクスポート時に凡例が後ろに来てしまう。あと枠からチャートがはみ出る。これvtkに手を入れないと多分無理
}


// mt番号はやたら多いので断面積表をスキャンしてプロットする/しないを選択するのは無駄が多い。
// よってitem状態が変わったものだけを選択する（あるいはチェックが外れていれば選択しない）
void XsViewer::handleItemChanged(phys::ParticleType ptype, QTreeWidgetItem *item, int column)
{
	if(column == NuclideTableWidget::COLUMN_ZAID) return;
	std::string mtStr = item->text(NuclideTableWidget::COLUMN_MT).toStdString();
	TargetInfo info(ptype,
					item->parent()->text(NuclideTableWidget::COLUMN_ZAID),
					ace::mt::toNumber(mtStr),
					item->text(NuclideTableWidget::COLUMN_FACTOR).toDouble());

	//mDebug() << "Changed item info, ZAID===" << info.zaid << "MT=" << info.mt << ", factor===" << info.factor;


	if(item->checkState(NuclideTableWidget::COLUMN_PLOT) == Qt::Checked) {
		// 変更されたアイテムにチェックがついている場合、removingTargets_に同データがあれば削除し、その後にaddingTargets_に加える。
		for(auto it = removingTargets_.begin(); it != removingTargets_.end(); ++it) {
			if(isSameInfoExceptFactor(*it, info)) {
				removingTargets_.erase(it);
				break;
			}
		}
		// 後から変更されたアイテムinfoの方を追加しないとダメなので、検索して見つかれば上書き。そうでなければemplace
		auto addingIt = addingTargets_.find(info);
		if(addingIt != addingTargets_.end()) addingTargets_.erase(addingIt);
		addingTargets_.emplace(std::move(info));
		//mDebug() << "Info added to addingTargets_";

	} else {
		// 変更されたアイテムにチェックが無い場合、addingTargets_に同データがあれば削除し、その後にremovingTargets_に加える。
		for(auto it = addingTargets_.begin(); it != addingTargets_.end(); ++it) {
			if(isSameInfoExceptFactor(*it, info)) {
				addingTargets_.erase(it);
				break;
			}
		}
		// removingTargets_に加えるが,factor以外が同じ要素があれば上書きする必要があるので、検索・削除してから追加。
		auto remIt = removingTargets_.find(info);
		if(remIt != removingTargets_.end()) removingTargets_.erase(remIt);
		removingTargets_.emplace(std::move(info));
		//mDebug() << "Info added to removingTargets_";
	}
}

/*
 * １．自動スケールでプロット
 * ２．完全固定スケールでプロット
 * ３．一部固定
 *
 * charConfig_.xminなどがtrue→一部固定、他は現在の値を使用
 * autoScaleがtrue
 */
void setDoubleValue(const QString &str, std::unique_ptr<double> *ptr)
{
    if(!str.isEmpty()){
        bool ok = false;
        double val = str.toDouble(&ok);
        if(ok)  {
            ptr->reset(new double(val));
        } else {
            throw std::invalid_argument("string =" + str.toStdString() + " is not a numeric value");
        }
    }
}
void XsViewer::updatePlot(bool autoScale)
{
	if(removingTargets_.empty() && addingTargets_.empty() && chartConfig_.haveApplied()) return;

    std::shared_ptr<std::pair<double, double>> xrange, yrange;
    // !autoScale →　xy両方
    // xmin/xmaxどちらか→x軸のみ

    if(!autoScale || !ui->lineEditXmin->text().isEmpty() || !ui->lineEditXmax->text().isEmpty()) {
        try {
            std::unique_ptr<double> xmin, xmax;
            setDoubleValue(ui->lineEditXmin->text(), &xmin);
            setDoubleValue(ui->lineEditXmax->text(), &xmax);
            auto xAxis = chart_->GetAxis(vtkAxis::BOTTOM);
            xmin.reset(new double(xmin ? *xmin.get() : xAxis->GetMinimum()));
            xmax.reset(new double(xmax ? *xmax.get() : xAxis->GetMaximum()));
            if(*xmin.get() > *xmax.get()) {
                std::stringstream ss;
                ss << "xmin=" << *xmin.get() << " is larger than xmax=" << *xmax.get();
                throw std::invalid_argument(ss.str());
            } else if(*xmin.get() < 0) {
                throw std::invalid_argument("xmin=" + std::to_string(*xmin.get()) + " should be positive.");
            }
            if(ui->checkBoxXlog->isChecked()) {
                *xmin.get() = std::pow(10, *xmin.get());
                *xmax.get() = std::pow(10, *xmax.get());
            }
            xrange.reset(new std::pair<double, double>(*xmin.get(), *xmax.get()));
        } catch (std::invalid_argument &ia) {
            // 例外発生時にはxrangeがfalseになるので適用されない。
            QMessageBox::warning(this, "Invalid x range inputs", ia.what());
        }
    }
    if(!autoScale || !ui->lineEditYmin->text().isEmpty() || !ui->lineEditYmax->text().isEmpty()) {
        try{
            std::unique_ptr<double> ymin, ymax;
            setDoubleValue(ui->lineEditYmin->text(), &ymin);
            setDoubleValue(ui->lineEditYmax->text(), &ymax);
            auto yAxis = chart_->GetAxis(vtkAxis::LEFT);
            ymin.reset(new double(ymin ? *ymin.get() : yAxis->GetMinimum()));
            ymax.reset(new double(ymax ? *ymax.get() : yAxis->GetMaximum()));
            if(*ymin.get() > *ymax.get()) {
                std::stringstream ss;
                ss << "ymin=" << *ymin.get() << " is larger than xmax=" << *ymax.get();
                throw std::invalid_argument(ss.str());
            } else if(*ymin.get() < 0) {
                throw std::invalid_argument("ymin=" + std::to_string(*ymin.get()) + " should be positive.");
            }
            if(ui->checkBoxYlog->isChecked()) {
                *ymin.get() = std::pow(10, *ymin.get());
                *ymax.get() = std::pow(10, *ymax.get());
            }
            yrange.reset(new std::pair<double, double>(*ymin.get(), *ymax.get()));
        } catch (std::invalid_argument &ia) {
            QMessageBox::warning(this, "Invalid y range inputs", ia.what());
        }
	}

	chart_->ClearPlots();
	//  ここで現在のターゲットからremovingTargetを除く
	for(auto &rinfo: removingTargets_) {
		for(auto it = currentTargets_.begin(); it != currentTargets_.end();) {
			if(isSameInfoExceptFactor(rinfo, *it)) {
				it = currentTargets_.erase(it);
			} else {
				++it;
			}
		}
	}
	removingTargets_.clear();
	// ここで現在の表示ターゲットにaddingTargets_を加える。
	// 重複ターゲットは削除する。同核種Factor違いで2本線を引くのは嫌なので、FACTORは同値判定から外す。
	for(auto &ainfo: addingTargets_) {
		for(auto it = currentTargets_.begin(); it != currentTargets_.end();) {
			if(isSameInfoExceptFactor(ainfo, *it)) {
				it = currentTargets_.erase(it);
			} else {
				++it;
			}
		}
	}
//	mDebug() << "Adding targets===";
//	for(auto &info: addingTargets_) {
//		mDebug() << info.toString();
//	}
//	mDebug() << "Current targets===";
//	for(auto &info: currentTargets_) {
//		mDebug() << info.toString();
//	}
	currentTargets_.insert(addingTargets_.begin(), addingTargets_.end());
	addingTargets_.clear();

	// TODO heating numberって単位はbarnじゃないよな。
	// info は断面積情報を格納した構造体。核種名、反応名等。

//    // 丸めるのはMINIMUM＿VALUEと現在のｙ軸の小さい方の値で
//    auto axis_min = chart_->GetAxis(vtkAxis::LEFT)->GetMinimum();
//    if(chart_->GetAxis(vtkAxis::LEFT)->GetLogScale()) {
//        axis_min = std::pow(10, axis_min);
//    }
//    double min_value = (axis_min <= 0) ? MINIMUM_VALUE : std::min(axis_min, MINIMUM_VALUE);
    // autoscale している場合、新たな丸め下限値で理スケールされてしまうので意味なし。
    auto min_value = MINIMUM_VALUE;

    size_t num = 0;
	for(auto &info: currentTargets_) {
		auto table = vtkSmartPointer<vtkTable>::New();
		auto arrX = vtkSmartPointer<vtkFloatArray>::New();
		arrX->SetName("Energy");
		table->AddColumn(arrX);
		auto arrY = vtkSmartPointer<vtkFloatArray>::New();
		std::string title = info.zaid.toStdString() + ": " +  ace::mt::description(info.mt);
        if(std::abs(info.factor - 1) > 1e-6) {
            // TODO 桁数指定で文字列化したい。有効三桁くらいが妥当
            title += "  x" + std::to_string(info.factor);
        }
        arrY->SetName(title.c_str());
		table->AddColumn(arrY);

		std::shared_ptr<const mat::Nuclide> nuclide = nuclidesMap2_.at(static_cast<int>(info.ptype)).at(info.zaid.toStdString());
		auto xsMap = nuclide->xsMap();
		const ace::CrossSection &xs = xsMap.at(ace::mt::toReaction(ace::mt::toMtString(info.mt)));

		table->SetNumberOfRows(xs.epoints.size());

		assert(xs.epoints.size() == xs.xs_value.size());
		for (size_t i = 0; i < xs.epoints.size(); ++i) {
			table->SetValue(i, 0, xs.epoints.at(i));
			// データに負の値が入ると対数軸が適用されなくなるので0は最小値に丸める。
			// table->SetValue(i, 1, xs.xs_value.at(i));

            if(xs.xs_value.at(i) <= min_value) {
                table->SetValue(i, 1, min_value);
			} else {
				table->SetValue(i, 1, xs.xs_value.at(i)*info.factor);
			}
			//mDebug() << "i=" << i << ", E=" << xs.epoints.at(i) << ", value=" << table->GetValue(i, 1);
		}


		vtkPlot *line = chart_->AddPlot(vtkChart::LINE);
		line->SetInputData(table, 0, 1);
        chartConfig_.applyLineStyle(num, line);
        ++num;
	}

	auto xax = chart_->GetAxis(vtkAxis::BOTTOM), yax = chart_->GetAxis(vtkAxis::LEFT);
    if(xrange) {
        xax->SetUnscaledRange(xrange->first, xrange->second);
		xax->SetBehavior(vtkAxis::FIXED);
	} else {
		xax->SetBehavior(vtkAxis::AUTO);
	}
    if(yrange) {
        double ytmp = (!ui->checkBoxYlog->isChecked() || yrange->first > 0) ? yrange->first : min_value;
        yax->SetUnscaledRange(ytmp, yrange->second);
		yax->SetBehavior(vtkAxis::FIXED);
	} else {
		yax->SetBehavior(vtkAxis::AUTO);
	}


    xax->SetLogScale(ui->checkBoxXlog->isChecked());
    yax->SetLogScale(ui->checkBoxYlog->isChecked());
    chart_->SetShowLegend(ui->checkBoxShowLegend->isChecked());

//	//chart_->Update();
//	contextView_->Update();
//	ui->xsVtkWidget->update();
//    // Start interactor
//	contextView_->GetInteractor()->Initialize();
////    view_->GetInteractor()->Start();

    // chartをdraggableにしたい。が,ver6以降ではこれらの関数は機能しない模様
    // https://www.vtk.org/pipermail/vtkusers/2016-January/093867.html
    //chart_->GetLegend()->SetDragEnabled(true);  // なぜか機能しない
    //chart_->GetLegend()->SetInteractive(true);

    chartConfig_.setHaveApplied(true);
}

void XsViewer::clearAllCheckBoxes()
{
	for(auto &tab: nuclideTables_) {
		tab->clearTableCheckBox();
    }
}

void XsViewer::applyConfig(bool autoScale)
{
    chartConfig_.applyToChart(chart_);
    // 非グラフ領域の設定はvtkChartには含まれないのでここで設定する。
    //BG vtkViewportの色指定は0.0-1.0のdouble vtkBrushは0.0-255.0
    const QColor& bgc = chartConfig_.bgColor();
    ui->xsVtkWidget->GetRenderWindow()->GetRenderers()->GetFirstRenderer()
            ->SetBackground(bgc.redF(), bgc.greenF(), bgc.blueF());
	// applyConfigでスケール変更されると見づらいのでレンジは更新しない。
	updatePlot(autoScale);
}

void XsViewer::editConfig()
{
	static int editingLineNumber = 0;
	ChartConfigDialog *ccd = new ChartConfigDialog(this, chartConfig_, editingLineNumber);
    auto ret = ccd->exec();
    if(ret == QDialog::Accepted) {
        chartConfig_ = ccd->getChartConfig();
		chartConfig_.setHaveApplied(false);
		editingLineNumber = ccd->getEditingLineNumber();
		/* applyConfigの引数はxyのスケールを変更する場合true。
		 * なのでchartConfig_でx/ymin/maxが設定されていなければfalseを与える。
		 * 考えられるのは
		 * 1．完全自動で適当にプロット → 引数 true
		 * 2．完全に変化なし → 引数 false
		 * 3．charConfig_でxmin/maxなどの何れかが設定され、新しい値に手動更新→ 引数はfalseでxmin等のポインタをチェックする。
		 */

		applyConfig(false);
    }
}

// FIXME　マウスオーバーしないと描画が更新されない
void XsViewer::enableXlog(bool b)
{
    chart_->GetAxis(vtkAxis::BOTTOM)->SetLogScale(b);
    chart_->GetAxis(vtkAxis::BOTTOM)->Update();
    contextView_->Update();
    ui->xsVtkWidget->GetRenderWindow()->GetRenderers()->GetFirstRenderer()->UpdateLightsGeometryToFollowCamera();
    ui->xsVtkWidget->update();
}

void XsViewer::enableYlog(bool b)
{
    chart_->GetAxis(vtkAxis::LEFT)->SetLogScale(b);
    chart_->GetAxis(vtkAxis::LEFT)->Update();
}

void XsViewer::enableLegend(bool b)
{
    chart_->SetShowLegend(b);
    chart_->Update();
}

// factor"だけ"が異なるTargetInfoは同値扱いにする。
bool operator<(const TargetInfo &t1, const TargetInfo &t2)
{
	if(t1.ptype != t2.ptype) return static_cast<int>(t1.ptype) < static_cast<int>(t2.ptype);
	if(t1.zaid != t2.zaid) return t1.zaid < t2.zaid;
	return t1.mt < t2.mt;
}

bool isSameInfo(const TargetInfo &t1, const TargetInfo &t2)
{
	return t1.mt == t2.mt && t1.ptype == t2.ptype && t1.zaid == t2.zaid
			&& std::abs(t1.factor - t2.factor) < FACTOR_EPS;
}

bool isSameInfoExceptFactor(const TargetInfo &t1, const TargetInfo &t2)
{
	return t1.mt == t2.mt && t1.ptype == t2.ptype && t1.zaid == t2.zaid;
}

std::string TargetInfo::toString() const
{
	std::stringstream ss;
	ss << "incident particle=" << phys::particleTypeTostr(ptype) << ", ZAID=" << zaid << ", MT=" << mt << ", factor=" << factor;
	return ss.str();
}
